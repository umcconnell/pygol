"""Parse Run Length Encoded files"""
import math
import re
from typing import Any, Dict, List, Tuple

from .matrix import Matrix

Env = Dict[str, Any]
Grid = List[List[int]]

# https://pythex.org/?regex=(%5Bxy%5D)%5Cs%3F%3D%5Cs%3F(%5Cd%2B)&test_string=x%20%3D%201%2C%20y%20%3D%2034&ignorecase=0&multiline=0&dotall=0&verbose=0
#: RegEx matching digits
DIGIT_REG = re.compile(r"(-?\d+)")
#: RegEx matching RLE first line
FIRSTLINE_REG = re.compile(r"(x|y|rule)\s?=\s?(\w+\/?\w*)")
#: RegEx matching RLE directives
RLE_REG = re.compile(r"(\d+)?([bo])")


def seed_from_rle(env: Env) -> Matrix:
    """Generate a Game of Life seed from an environment.

    Parameters
    ----------
    env: `dict` [str, `Any`]
        Environment dictionary generated by ``parse_file``.

    Returns
    -------
    `list` [`list` [int]]
        Game of Life grid with ``0`` representing a dead cell and ``1``
        representing a living cell.
    """
    grid = Matrix(env["x"], env["y"])

    start_x, start_y = env["start"] if "start" in env else (0, 0)
    if start_x < 0:
        grid.pad_left(abs(start_x))
        start_x = 0

    if start_y < 0:
        grid.pad_top(abs(start_y))
        start_y = 0

    for y in range(start_y, grid.height):
        if len(env["rle"]) > 0:
            line = parse_rle(env["rle"].pop(0))
        else:
            break

        for x in range(start_x, grid.width):
            if len(line) > 0:
                amount, cell = line[0]
            else:
                continue

            grid[y][x] = 0 if cell == "b" else 1
            amount -= 1

            if amount <= 0:
                line.pop(0)
                if len(line) == 0:
                    line.append((math.inf, "b"))
            else:
                line[0] = amount, cell

    return grid.matrix


def parse_comment(comment: str, env: Env) -> None:
    """Parse RLE comments and update user environment accordingly.

    Parameters
    ----------
    comment: str
        RLE comment to parse.
    env: `dict` [str, `Any`]
        Environment dictionary generated by ``parse_file``.

    Notes
    -----
    This function parses comments according to information on LifeWiki. Check
    the LifeWiki page on the RLE file-format for more information:
    https://www.conwaylife.com/wiki/Run_Length_Encoded##_lines
    """
    comment = comment[1:]  # Remove hash

    if comment.startswith("P") or comment.startswith("R"):
        env["start"] = tuple([int(x)
                              for x in DIGIT_REG.findall(comment)][:2])
    elif comment.startswith("r"):
        env["rule"] = comment[2:]


def parse_header(header: str, env: Env) -> None:
    """Parse RLE header lines and update user environment accordingly.

    Parameters
    ----------
    header: str
        RLE header to parse.
    env: `dict` [str, `Any`]
        Environment dictionary generated by ``parse_file``.

    Notes
    -----
    This function parses RLE headers according to information on LifeWiki. Check
    the LifeWiki page on the RLE file-format for more information:
    https://www.conwaylife.com/wiki/Run_Length_Encoded#Description_of_format
    """
    params = FIRSTLINE_REG.findall(header)

    for param, val in params:
        if param in ["x", "y"]:
            env[param] = int(val)
        else:
            env[param] = val


def parse_rle(rle: str) -> List[Tuple[int, str]]:
    """Parse RLE instructions.

    Parameters
    ----------
    rle: str
        RLE instruction to parse.

    Returns
    -------
    `list` [`tuple` [int, str]]
        Parsed/unwrapped RLE instruction.

    Notes
    -----
    This function parses RLE headers according to information on LifeWiki. Check
    the LifeWiki page on the RLE file-format for more information:
    https://www.conwaylife.com/wiki/Run_Length_Encoded#Description_of_format

    Examples
    --------
    >>> parse_rle("bo$2bo$3o!")
    [(1, 'b'), (1, 'o'), (2, 'b'), (1, 'o'), (3, 'o')]

    """
    steps = RLE_REG.findall(rle)
    result = []

    for amount, cell in steps:
        amount = int(amount) if amount else 1

        result.append((amount, cell))

    return result


def parse_file(path: str) -> Env:
    """Parse RLE files.

    Parameters
    ----------
    path: str
        File path to RLE file.

    Returns
    -------
    env: `dict` [str, `Any`]
        Environment dict containing parsed RLE information.
    """
    env = {
        "rule": "B3/S23",  # Standard Conway's Game of Life rule
        "start": (0, 0),
        "rle": ""
    }
    is_firstline = True

    with open(path) as file:
        for line in file:
            line = line.rstrip()

            if line.startswith("#"):
                parse_comment(line, env)
            else:
                if is_firstline:
                    is_firstline = False
                    parse_header(line, env)
                else:
                    # Handle RLE
                    if line.endswith("!"):
                        env["rle"] += line[:-1]
                        env["rle"] = env["rle"].split("$")
                        break

                    env["rle"] += line

    return env


def user_env(env: Env) -> Env:
    """Generate a user environment from an environment dict.

    Generate a Game of Life seed or base matrix. Embeds this seed in a user
    environment containing the needed information to run a Game of Life
    simulation.

    Parameters
    ----------
    env: `dict` [str, `Any`]
        Environment dictionary generated by ``parse_file``.

    Returns
    -------
    user_env: `dict` [str, `Any`]
        User environment with these attributes:

        ``width``
            Width of the Game of Life matrix.
        ``height``
            Height of the Game of Life matrix.
        ``rule``
            Rule used to run the simulation.
        ``seed``
            Seed to base simulation on.
    """
    seed = seed_from_rle(env)

    return {
        "width": env["x"],
        "height": env["y"],
        "rule": env["rule"],
        "seed": seed
    }


def parse(file: str) -> Env:
    """Parse an RLE file and create a user environment

    Parameters
    ----------
    file: str
        Path to the RLE file.

    Returns
    -------
    user_env: `dict` [str, `Any`]
        User environment returned from ``user_env()``. It has these attributes:

        ``width``
            Width of the Game of Life matrix.
        ``height``
            Height of the Game of Life matrix.
        ``rule``
            Rule used to run the simulation.
        ``seed``
            Seed to base simulation on.
    """
    return user_env(parse_file(file))
